"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRuntimeUrl = exports.createRuntimeUrl = exports.SNACK_RUNTIME_URL_PROTOCOL = exports.SNACK_RUNTIME_URL_ENDPOINT = void 0;
/** The default domain for every Snack URL */
exports.SNACK_RUNTIME_URL_ENDPOINT = 'u.expo.dev/933fd9c0-1666-11e7-afca-d980795c5824';
/** The default protocol for every Snack URL */
exports.SNACK_RUNTIME_URL_PROTOCOL = 'exp';
/**
 * Create a Snack URL from the provided information, that opens a Snack.
 * The URL must have `sdkVersion`, and either a `snack` or `channel` in order to be useful.
 */
function createRuntimeUrl(options) {
    const protocol = options.protocol || exports.SNACK_RUNTIME_URL_PROTOCOL;
    const endpoint = options.endpoint || exports.SNACK_RUNTIME_URL_ENDPOINT;
    const parameters = new URLSearchParams();
    // Add the EAS Update references, `platform` is added by Expo Go
    parameters.set('runtime-version', `exposdk:${options.sdkVersion}`);
    parameters.set('channel-name', 'production');
    // Add the Snack references
    if (options.snack)
        parameters.set('snack', options.snack);
    if (options.channel)
        parameters.set('snack-channel', options.channel);
    return `${protocol}://${endpoint}?${parameters}`;
}
exports.createRuntimeUrl = createRuntimeUrl;
/**
 * Parse the Snack URL info usable information, using the unified URL format.
 * The URL must have `sdkVersion`, and either a `snack` or `channel` in order to be useful.
 */
function parseRuntimeUrl(uri) {
    var _a, _b, _c;
    const url = typeof uri === 'string'
        ? // Force non-standard protocols to `http`, avoiding Node-related parsing issues
            new URL(uri.replace(/^[a-zA-Z]+:/, 'http:'))
        : uri;
    const snack = (_a = url.searchParams.get('snack')) !== null && _a !== void 0 ? _a : undefined;
    const channel = (_b = url.searchParams.get('snack-channel')) !== null && _b !== void 0 ? _b : undefined;
    const runtimeVersion = url.searchParams.get('runtime-version');
    const [, sdkVersion] = (_c = runtimeVersion === null || runtimeVersion === void 0 ? void 0 : runtimeVersion.match(/(?:exposdk:)?([0-9]+\.[0-9]+\.[0-9]+)/)) !== null && _c !== void 0 ? _c : [];
    if (!sdkVersion) {
        return null;
    }
    return {
        sdkVersion,
        snack,
        channel,
    };
}
exports.parseRuntimeUrl = parseRuntimeUrl;
//# sourceMappingURL=urls.js.map