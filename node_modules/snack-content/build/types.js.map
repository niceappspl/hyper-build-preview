{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { SDKVersion, SDKFeature } from './sdks/types';\n\nexport type { SDKVersion, SDKFeature };\n\n/**\n * The content of a Snack code or asset file.\n */\nexport type SnackFile = SnackCodeFile | SnackAssetFile;\n\n/**\n * A non-asset file that is included with the project.\n * This can be either a code file (.js/.tsx) or a support\n * file such as a markdown or JSON file.\n */\nexport type SnackCodeFile = {\n  type: 'CODE';\n  contents: string;\n  error?: Error;\n};\n\n/**\n * An asset file that refers to externally available\n * content such as an image or font.\n *\n * When resolved, the `contents` field is an URL to the\n * uploaded asset. A File, Blob or FormData object may\n * also be provided after which it is automatically uploaded\n * and converted into an URL.\n */\nexport type SnackAssetFile = {\n  type: 'ASSET';\n  contents: string | File | Blob | FormData; // string = url\n  error?: Error;\n};\n\n/**\n * Dictionary of filenames and their content that make up\n * the files of the Snack.\n */\nexport type SnackFiles = {\n  [path: string]: SnackFile;\n};\n\n/**\n * Dictionary of dependencies and their version.\n */\nexport type SnackDependencyVersions = { [name: string]: string };\n\n/**\n * The version, resolved handle, peer-dependencies and optional\n * error of a dependency.\n */\nexport type SnackDependency = {\n  version: string;\n  handle?: string;\n  peerDependencies?: SnackDependencyVersions;\n  error?: Error;\n  wantedVersion?: string;\n};\n\n/**\n * Dictionary of dependency names and their (resolved) versions.\n */\nexport type SnackDependencies = {\n  [name: string]: SnackDependency;\n};\n\n/**\n * Wanted version of the dependency that is missing, including the\n * dependants which have this dependency as a peer-dependency.\n */\nexport type SnackMissingDependency = {\n  dependents: string[];\n  wantedVersion?: string;\n};\n\n/**\n * Dictionary of dependencies that are missing.\n */\nexport type SnackMissingDependencies = {\n  [name: string]: SnackMissingDependency;\n};\n"]}