{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/sdks/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Version of the Expo SDK to use (e.g. \"48.0.0\").\n */\nexport type SDKVersion = '48.0.0' | '49.0.0' | '50.0.0' | '51.0.0' | '52.0.0'; // TODO(cedric): drop SDK 48\n\n/** @internal */\nexport type SDKSpec = {\n  // Version spec for the published \"expo\" package. This version is\n  // used to fetch compatible package versions. The value is typically\n  // in the form of \"^39.0.0\" but may also contain custom specs, such\n  // as \"40.0.0-beta.2\".\n  version: string;\n\n  // Modules that are pre-loaded by the Snack runtime, and which\n  // the user does not need to add to `package.json`.\n  // The version for these packages is hardcoded as it cannot be\n  // resolved using bundledNativeModules.json.\n  coreModules: {\n    [name: string]: string;\n  };\n\n  // Modules that are pre-loaded by the Snack runtime, but which\n  // are expected to be added as a dependency anyway. This ensures\n  // that `package.json` is up to date, when downloading the Snack\n  // as a zip-file. These modules don't have versions defined, but\n  // instead bundledNativeModules.json should be used to obtain\n  // the recent version.\n  bundledModules: {\n    [name: string]: '*';\n  };\n\n  // Modules that have been deprecated. The value represents a valid\n  // a description providing a solution or explanation (eg.\n  // \"expo-permissions\": \"Use permissions getters and requesters in specific modules instead...\"\"\n  deprecatedModules?: {\n    [name: string]: string;\n  };\n};\n\n/**\n * Feature that is supported by the SDK (e.g. \"TYPESCRIPT\").\n */\nexport type SDKFeature =\n  | 'MULTIPLE_FILES'\n  | 'PROJECT_DEPENDENCIES'\n  | 'TYPESCRIPT'\n  | 'UNIMODULE_IMPORTS'\n  | 'POSTMESSAGE_TRANSPORT'\n  | 'VERSIONED_SNACKAGER';\n"]}