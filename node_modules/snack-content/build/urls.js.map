{"version":3,"file":"urls.js","sourceRoot":"","sources":["../src/urls.ts"],"names":[],"mappings":";;;AAsBA,6CAA6C;AAChC,QAAA,0BAA0B,GAAG,iDAAiD,CAAC;AAC5F,+CAA+C;AAClC,QAAA,0BAA0B,GAAG,KAAK,CAAC;AAEhD;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,OAA2C;IAC1E,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,kCAA0B,CAAC;IAChE,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,kCAA0B,CAAC;IAChE,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;IAEzC,gEAAgE;IAChE,UAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE,WAAW,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;IACnE,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAE7C,2BAA2B;IAC3B,IAAI,OAAO,CAAC,KAAK;QAAE,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1D,IAAI,OAAO,CAAC,OAAO;QAAE,UAAU,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAEtE,OAAO,GAAG,QAAQ,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;AACnD,CAAC;AAdD,4CAcC;AAED;;;GAGG;AACH,SAAgB,eAAe,CAAC,GAAiB;;IAC/C,MAAM,GAAG,GACP,OAAO,GAAG,KAAK,QAAQ;QACrB,CAAC,CAAC,+EAA+E;YAC/E,IAAI,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,GAAG,CAAC;IAEV,MAAM,KAAK,SAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,mCAAI,SAAS,CAAC;IACzD,MAAM,OAAO,SAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,mCAAI,SAAS,CAAC;IACnE,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC/D,MAAM,CAAC,EAAE,UAAU,CAAC,SAAG,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,uCAAuC,oCAAK,EAAE,CAAC;IAE5F,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IAED,OAAO;QACL,UAAU;QACV,KAAK;QACL,OAAO;KACR,CAAC;AACJ,CAAC;AArBD,0CAqBC","sourcesContent":["export type RuntimeUrlInfo = {\n  /** The full Expo SDK version that should be loaded */\n  sdkVersion: string;\n  /**\n   * The unique Snack hash, referring to a saved Snack.\n   * This value may conain `[a-zA-Z0-9-_]`, but may not start with `[-_]`.\n   */\n  snack?: string;\n  /**\n   * The Snack session or channel reference, used to communicate with the Snack Website.\n   * This value may contain `[a-zA-Z0-9]`.\n   */\n  channel?: string;\n};\n\nexport type RuntimeUrlOptions = {\n  /** The protocol of the URL, e.g. `exp` for Expo Go, `https` for web (defaults to `exp`) */\n  protocol?: string;\n  /** The endpoint containing base domain, and optional pathname, for EAS Update (defaults to EAS Update endpoint) */\n  endpoint?: string;\n};\n\n/** The default domain for every Snack URL */\nexport const SNACK_RUNTIME_URL_ENDPOINT = 'u.expo.dev/933fd9c0-1666-11e7-afca-d980795c5824';\n/** The default protocol for every Snack URL */\nexport const SNACK_RUNTIME_URL_PROTOCOL = 'exp';\n\n/**\n * Create a Snack URL from the provided information, that opens a Snack.\n * The URL must have `sdkVersion`, and either a `snack` or `channel` in order to be useful.\n */\nexport function createRuntimeUrl(options: RuntimeUrlInfo & RuntimeUrlOptions): string {\n  const protocol = options.protocol || SNACK_RUNTIME_URL_PROTOCOL;\n  const endpoint = options.endpoint || SNACK_RUNTIME_URL_ENDPOINT;\n  const parameters = new URLSearchParams();\n\n  // Add the EAS Update references, `platform` is added by Expo Go\n  parameters.set('runtime-version', `exposdk:${options.sdkVersion}`);\n  parameters.set('channel-name', 'production');\n\n  // Add the Snack references\n  if (options.snack) parameters.set('snack', options.snack);\n  if (options.channel) parameters.set('snack-channel', options.channel);\n\n  return `${protocol}://${endpoint}?${parameters}`;\n}\n\n/**\n * Parse the Snack URL info usable information, using the unified URL format.\n * The URL must have `sdkVersion`, and either a `snack` or `channel` in order to be useful.\n */\nexport function parseRuntimeUrl(uri: string | URL): RuntimeUrlInfo | null {\n  const url =\n    typeof uri === 'string'\n      ? // Force non-standard protocols to `http`, avoiding Node-related parsing issues\n        new URL(uri.replace(/^[a-zA-Z]+:/, 'http:'))\n      : uri;\n\n  const snack = url.searchParams.get('snack') ?? undefined;\n  const channel = url.searchParams.get('snack-channel') ?? undefined;\n  const runtimeVersion = url.searchParams.get('runtime-version');\n  const [, sdkVersion] = runtimeVersion?.match(/(?:exposdk:)?([0-9]+\\.[0-9]+\\.[0-9]+)/) ?? [];\n\n  if (!sdkVersion) {\n    return null;\n  }\n\n  return {\n    sdkVersion,\n    snack,\n    channel,\n  };\n}\n"]}