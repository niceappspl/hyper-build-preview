{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  SDKVersion,\n  SnackDependencies,\n  SnackDependencyVersions,\n  SnackFiles,\n  SnackMissingDependencies,\n} from 'snack-content';\n\nimport { SnackTransport } from './transports';\n\n/**\n * An error that can optionally hold a file-name and line/column location.\n */\nexport interface SnackError extends Error {\n  fileName?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\nexport type SnackConnectedClientStatus = 'ok' | 'error' | 'reloading';\n\n/**\n * Client which connected to the Snack.\n *\n * Clients are only able to connect when the Snack is `online`.\n */\nexport type SnackConnectedClient = {\n  transport: string;\n  id: string;\n  name: string;\n  platform: string;\n  status: SnackConnectedClientStatus;\n  error?: SnackError;\n  previewURL?: string;\n  previewTimestamp?: number;\n};\n\n/**\n * Collection of connected clients.\n */\nexport type SnackConnectedClients = {\n  [key: string]: SnackConnectedClient;\n};\n\n/**\n * User that is used for communicating with the Expo servers.\n */\nexport type SnackUser = {\n  sessionSecret?: string;\n  accessToken?: string;\n};\n\n/**\n * Request data to be used with the `sendBeacon` API.\n */\nexport type SnackSendBeaconRequest = {\n  url: string;\n  data: any;\n};\n\nexport type SnackListenerSubscription = () => any;\n\n/**\n * Log data for when a connected client calls one of the\n * `console.[log,info,warn,error]` to log information to the\n * console.\n */\nexport type SnackLogEvent = {\n  type: 'error' | 'warn' | 'log' | 'info';\n  message: string;\n  connectedClient?: SnackConnectedClient;\n  error?: SnackError;\n};\n\nexport type SnackWindowRef = {\n  current: Window | null;\n};\n\nexport type SnackState = {\n  /**\n   * Expo SDK version.\n   */\n  sdkVersion: SDKVersion;\n\n  /**\n   * Files that make up the content (code & assets) of the Snack. There should\n   * always be a file called \"App.js\" or \"App.tsx\" as the main entry point.\n   */\n  files: SnackFiles;\n\n  /**\n   * Packages that can be used in the code files. Packages that are pre-loaded\n   * by the sdk may be ommited, but it is recommended to add them anyway.\n   */\n  dependencies: SnackDependencies;\n\n  /**\n   * Optional name. The name is used when saving or downloading the Snack; and is used\n   * for the onlineName property.\n   */\n  name: string;\n\n  /**\n   * Additional description of the Snack. The description is used when saving the Snack\n   * and may also be used for searching purposes.\n   */\n  description: string;\n\n  /**\n   * Collection of dependencies that are missing but are required by one or more of\n   * the dependencies.\n   */\n  missingDependencies: SnackMissingDependencies;\n\n  /**\n   * Collection of packages and versions that are compatible with the selected\n   * SDK version. This is similar to using `expo install`, which ensures the latest\n   * compatible version is installed.\n   */\n  wantedDependencyVersions?: SnackDependencyVersions;\n\n  /**\n   * Disabled state. When the Snack is disabled it will not resolve any dependencies\n   * or upload any asset files. It also disables the ability to go online.\n   */\n  disabled: boolean;\n\n  /**\n   * When online is true, Expo clients can connect to the Snack and receive live updates\n   * when code or dependencies are changed. It also makes the Snack visible in the\n   * \"Recently in Development\" section of the Expo client.\n   */\n  online: boolean;\n\n  /**\n   * Communication channel (\"pubsub\") through which live updates are transferred.\n   * The communication channel is only used when the Snack is \"online\".\n   */\n  channel: string;\n\n  /**\n   * Device-id of the Expo client. When set causes the Snack to be visible in the\n   * \"Recently in Development\" section of the Expo client with that device-id.\n   * The device-id is only used when the Snack is \"online\".\n   */\n  deviceId?: string;\n\n  /**\n   * Unique experience url which can be used to open the Expo client and connect\n   * to the Snack (e.g. \"exp://u.expo.dev/xxx?runtime-version=exposdk:38.0.0&channel-name=production&snack=78173941\").\n   */\n  url: string;\n\n  /**\n   * Name of the Snack as shown in the \"Recently in Development\" section in the\n   * Expo client. The online-name will be empty when the Snack is not \"online\".\n   */\n  onlineName?: string;\n\n  /**\n   * A close request that should be send using the browser `sendBeacon` API\n   * whenever the browser session is unloaded. This gives the Snack a last opportunity\n   * to gracefully close its connections so that the \"Recently in Development\"\n   * section in the Expo client no longer shows the Snack.\n   */\n  sendBeaconCloseRequest?: SnackSendBeaconRequest;\n\n  /**\n   * @internal\n   */\n  transports: { [id: string]: SnackTransport };\n\n  /**\n   * Clients that are currently connected.\n   */\n  connectedClients: SnackConnectedClients;\n\n  /**\n   *\n   */\n  user?: SnackUser;\n\n  /**\n   * Unsaved status of the Snack. Becomes `true` when the Snack code is changed and\n   * `false` whenever the Snack is saved.\n   */\n  unsaved: boolean;\n\n  /**\n   * Full name of the saved Snack.\n   */\n  id?: string;\n\n  /**\n   * Id of this version of the saved Snack. Each Snack can have many different versions or revisions, each revision has its own snackId.\n   */\n  snackId?: string;\n\n  /**\n   * Id of a Snack saved to an account. This id points to the latest version of a Snack revision and associated user.\n   */\n  accountSnackId?: string;\n\n  /**\n   * URL of the saved Snack.\n   * The URL is empty when no save \"id\" is available.\n   */\n  saveURL?: string;\n\n  /**\n   * Last saved (non-draft) Expo SDK version.\n   */\n  savedSDKVersion?: string;\n\n  /**\n   * URL to use to when loading the web-preview in an iframe.\n   *\n   * Web-preview is supported from SDK 40 and higher.\n   * To enable it, set the `webPreviewRef` to the contentWindow\n   * of the iframe.\n   */\n  webPreviewURL?: string;\n\n  /**\n   * The runtime URL to serve webPlayer.\n   */\n  webPlayerURL?: string;\n};\n"]}