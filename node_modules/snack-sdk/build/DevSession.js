"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var DevSession = /** @class */ (function () {
    // NOTE(cedric): recurrent development session alive notifications are disabled
    // private notifyInterval: number = 40000;
    // private notifyTimer?: any;
    function DevSession(options) {
        this.apiURL = options.apiURL;
        this.logger = options.logger;
        this.onSendBeaconCloseRequest = options.onSendBeaconCloseRequest;
    }
    DevSession.prototype.setState = function (state, prevState) {
        // Notify or close the session , when either:
        // 1. session-url has changed
        // 2. user has changed
        // 3. device-id has hanged
        // Close
        var isCloseUser = prevState.user &&
            (!state.online || state.url !== prevState.url || state.user !== prevState.user);
        var isCloseDevice = prevState.deviceId &&
            (!state.online || state.url !== prevState.url || state.deviceId !== prevState.deviceId);
        if (prevState.online && (isCloseUser || isCloseDevice)) {
            this.close(prevState.url, isCloseUser ? prevState.user : undefined, isCloseDevice ? prevState.deviceId : undefined);
        }
        // Notify
        if (state.user !== prevState.user ||
            state.online !== prevState.online ||
            state.url !== prevState.url ||
            state.deviceId !== prevState.deviceId ||
            state.onlineName !== prevState.onlineName) {
            this.notify(state);
        }
    };
    DevSession.prototype.setFocus = function (state) {
        this.notify(state, true);
    };
    DevSession.prototype.getRequest = function (close, user, deviceId) {
        var suffix = deviceId ? "?deviceId=" + deviceId : '';
        var endpoint = close ? 'notify-close' : 'notify-alive';
        var url = this.apiURL + "/--/api/v2/development-sessions/" + endpoint + suffix;
        return {
            url: url,
            method: 'post',
            headers: __assign({ 'Content-Type': 'application/json' }, utils_1.createUserHeader(user)),
        };
    };
    DevSession.prototype.notify = function (state, setFocus) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var user, online, onlineURL, deviceId, onlineName, _c, url, data, response, json, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        user = state.user, online = state.online, onlineURL = state.url, deviceId = state.deviceId, onlineName = state.onlineName;
                        // NOTE(cedric): recurrent development session alive notifications are disabled
                        // if (this.notifyTimer) {
                        //   clearTimeout(this.notifyTimer);
                        //   this.notifyTimer = undefined;
                        // }
                        if (!online || (!user && !deviceId)) {
                            this.focusedAt = undefined;
                            return [2 /*return*/];
                        }
                        if (!this.focusedAt || setFocus) {
                            this.focusedAt = Date.now();
                        }
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 4, , 5]);
                        _c = this.getRequest(false, user, deviceId), url = _c.url, data = __rest(_c, ["url"]);
                        return [4 /*yield*/, utils_1.fetch(url, __assign(__assign({}, data), { body: JSON.stringify({
                                    data: {
                                        session: {
                                            description: onlineName,
                                            hostname: 'snack',
                                            config: {},
                                            url: onlineURL,
                                            source: 'snack',
                                            openedAt: this.focusedAt,
                                        },
                                    },
                                }) }))];
                    case 2:
                        response = _d.sent();
                        if (!response.ok) {
                            throw Error(response.statusText);
                        }
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _d.sent();
                        this.onSendBeaconCloseRequest({
                            url: this.getRequest(true, undefined, deviceId).url,
                            data: new Blob([
                                JSON.stringify(__assign({ session: {
                                        url: onlineURL,
                                    } }, (((_a = json.data) === null || _a === void 0 ? void 0 : _a.auth) ? {
                                    auth: json.data.auth,
                                }
                                    : {}))),
                            ], { type: 'text/plain' }),
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _d.sent();
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error('Failed to advertise', e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    DevSession.prototype.close = function (onlineURL, user, deviceId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, url, data, response, e_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        _b = this.getRequest(true, user, deviceId), url = _b.url, data = __rest(_b, ["url"]);
                        return [4 /*yield*/, utils_1.fetch(url, __assign(__assign({}, data), { body: JSON.stringify({
                                    session: {
                                        url: onlineURL,
                                    },
                                }) }))];
                    case 1:
                        response = _c.sent();
                        if (!response.ok) {
                            throw Error(response.statusText);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _c.sent();
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error('Failed to advertise close', e_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return DevSession;
}());
exports.default = DevSession;
//# sourceMappingURL=DevSession.js.map