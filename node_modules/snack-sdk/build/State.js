"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUnsaved = exports.isCodeChanged = exports.isBusy = exports.updateObjects = exports.removeObject = exports.removeObjects = exports.addObject = exports.addObjects = void 0;
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var snack_content_1 = require("snack-content");
function addObjects(state, content, filter) {
    var newState = null;
    for (var key in content) {
        if (filter ? filter(content[key], state[key]) : !isEqual_1.default(content[key], state[key])) {
            newState = newState !== null && newState !== void 0 ? newState : __assign({}, state);
            newState[key] = content[key];
        }
    }
    return newState !== null && newState !== void 0 ? newState : state;
}
exports.addObjects = addObjects;
function addObject(state, key, content, filter) {
    var _a;
    return addObjects(state, (_a = {}, _a[key] = content, _a), filter);
}
exports.addObject = addObject;
function removeObjects(state, keys) {
    if (!keys.length)
        return state;
    var newState = null;
    keys.forEach(function (key) {
        if (state[key]) {
            newState = newState !== null && newState !== void 0 ? newState : __assign({}, state);
            delete newState[key];
        }
    });
    return newState !== null && newState !== void 0 ? newState : state;
}
exports.removeObjects = removeObjects;
function removeObject(state, key) {
    return removeObjects(state, [key]);
}
exports.removeObject = removeObject;
function updateObjects(state, content, compareFn) {
    if (compareFn === void 0) { compareFn = isEqual_1.default; }
    var newState = null;
    for (var key in content) {
        var val = content[key];
        if (val === null) {
            if (state[key]) {
                newState = newState !== null && newState !== void 0 ? newState : __assign({}, state);
                delete newState[key];
            }
        }
        else if (!compareFn(val, state[key])) {
            newState = newState !== null && newState !== void 0 ? newState : __assign({}, state);
            newState[key] = val;
        }
    }
    return newState !== null && newState !== void 0 ? newState : state;
}
exports.updateObjects = updateObjects;
function isBusy(state) {
    return (!!Object.keys(state.dependencies).find(function (name) { return !state.dependencies[name].handle && !snack_content_1.isModulePreloaded(name, state.sdkVersion); }) ||
        !!Object.values(state.files).find(function (file) { return file.type === 'ASSET' && typeof file.contents !== 'string'; }));
}
exports.isBusy = isBusy;
function isCodeChanged(state, prevState) {
    return (state.dependencies !== prevState.dependencies ||
        state.files !== prevState.files ||
        state.sdkVersion !== prevState.sdkVersion);
}
exports.isCodeChanged = isCodeChanged;
function isUnsaved(state, prevState) {
    return (state.dependencies !== prevState.dependencies ||
        state.files !== prevState.files ||
        state.sdkVersion !== prevState.sdkVersion ||
        state.name !== prevState.name ||
        state.description !== prevState.description);
}
exports.isUnsaved = isUnsaved;
//# sourceMappingURL=State.js.map