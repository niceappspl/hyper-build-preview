{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AAAA,kEAA2C;AAC3C,iCAAwC;AACxC,+CAA6D;AAIrD,IAAA,KAAK,GAAK,wBAAa,EAAE,MAApB,CAAqB;AACzB,sBAAK;AAEd;;;;GAIG;AACH,IAAM,mBAAmB,GAAG,gEAAgE,CAAC;AAC7F,IAAM,eAAe,GAAG,uBAAc,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;AAEhE,SAAgB,aAAa,CAAC,OAAgB;IAC5C,OAAO,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,eAAe,EAAE,CAAC;IAEvC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC3E;IAED,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;KAC5F;IAED,KAAmB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;QAAvB,IAAM,IAAI,gBAAA;QACb,IAAI,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CACb,gDAA6C,IAAI,yCAAmC,CACrF,CAAC;SACH;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AApBD,sCAoBC;AAED,SAAgB,SAAS,CAAC,QAAgB,EAAE,UAAsB,EAAE,OAAgB,EAAE,EAAW;IAC/F,OAAO,gCAAgB,CAAC,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,UAAU,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AACxE,CAAC;AAFD,8BAEC;AAED,SAAgB,WAAW,CAAC,MAO3B;IACC,IAAM,KAAK,GAAe,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,MAAM,CAAC,IAAI;QAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1C,IAAI,MAAM,CAAC,QAAQ;QAAE,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IACtD,IAAI,MAAM,CAAC,UAAU;QAAE,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IAC5D,IAAI,MAAM,CAAC,YAAY;QAAE,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;IAClE,IAAI,MAAM,CAAC,KAAK;QAAE,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC7C,OAAO,KAAK,CAAC;AACf,CAAC;AAfD,kCAeC;AAED,SAAgB,gBAAgB,CAAC,IAAgB;IAC/C,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,aAAa,EAAE;QACvB,OAAO,EAAE,cAAc,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;KAC/C;IAED,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,EAAE;QACrB,OAAO,EAAE,aAAa,EAAE,YAAU,IAAI,CAAC,WAAa,EAAE,CAAC;KACxD;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAVD,4CAUC","sourcesContent":["import fetchPonyfill from 'fetch-ponyfill';\nimport { customAlphabet } from 'nanoid';\nimport { SDKVersion, createRuntimeUrl } from 'snack-content';\n\nimport { SnackError, SnackUser } from './types';\n\nconst { fetch } = fetchPonyfill();\nexport { fetch };\n\n/**\n * All valid characters to generate a new channel ID.\n * Both `+` and `-` are used as delimiters in the classic updates URL.\n * In the new URL format, we prefer URL/sub-domain safe characters.\n */\nconst VALID_CHANNEL_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst generateChannel = customAlphabet(VALID_CHANNEL_CHARS, 10);\n\nexport function createChannel(channel?: string): string {\n  channel = channel ?? generateChannel();\n\n  if (channel.length < 6) {\n    throw new Error('Please use a channel id with more characters (entropy)');\n  }\n\n  if (channel.length > 128) {\n    throw new Error('Channel id too long, use a channel id thats shorter than 128 characters');\n  }\n\n  for (const char of channel) {\n    if (VALID_CHANNEL_CHARS.indexOf(char) < 0) {\n      throw new Error(\n        `Channel id contains an invalid character \"${char}\", only \"[0-9a-zA-Z]\" are allowed`,\n      );\n    }\n  }\n\n  return channel;\n}\n\nexport function createURL(endpoint: string, sdkVersion: SDKVersion, channel?: string, id?: string) {\n  return createRuntimeUrl({ endpoint, channel, sdkVersion, snack: id });\n}\n\nexport function createError(config: {\n  message: string;\n  name?: string;\n  fileName?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n  stack?: string;\n}): SnackError {\n  const error: SnackError = new Error(config.message);\n  if (config.name) error.name = config.name;\n  if (config.fileName) error.fileName = config.fileName;\n  if (config.lineNumber) error.lineNumber = config.lineNumber;\n  if (config.columnNumber) error.columnNumber = config.columnNumber;\n  if (config.stack) error.stack = config.stack;\n  return error;\n}\n\nexport function createUserHeader(user?: SnackUser): { [key: string]: string } {\n  if (user?.sessionSecret) {\n    return { 'Expo-Session': user.sessionSecret };\n  }\n\n  if (user?.accessToken) {\n    return { Authorization: `Bearer ${user.accessToken}` };\n  }\n\n  return {};\n}\n"]}