"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageName = exports.verifyDependency = exports.getMissingDependencies = void 0;
var semver_1 = __importDefault(require("semver"));
var snack_content_1 = require("snack-content");
var validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
var utils_1 = require("./utils");
function getKey(name, version) {
    return version ? name + "@" + version : name;
}
var DependencyResolver = /** @class */ (function () {
    function DependencyResolver(options) {
        this.status = {};
        this.snackagerURL = options.snackagerURL;
        this.logger = options.logger;
        this.callback = options.callback;
    }
    DependencyResolver.prototype.add = function (name, version, sdkVersion) {
        var key = getKey(name, version);
        this.status[key] = this.status[key] || this.resolve(key, name, version, sdkVersion);
        return this.status[key];
    };
    DependencyResolver.prototype.remove = function (name, version, _sdkVersion) {
        delete this.status[getKey(name, version)];
    };
    DependencyResolver.prototype.waitForCompletion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = Object.values(this.status);
                        _a.label = 1;
                    case 1:
                        if (!promises.length) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        _a.sent();
                        promises = Object.values(this.status);
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DependencyResolver.prototype.resolve = function (key, name, version, sdkVersion) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var versionSnackager, url, i, res, data, error, e_1, error, promiseExists;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        versionSnackager = sdkVersion >= '37.0.0' ? 'version_snackager=true&' : '';
                        url = this.snackagerURL + "/bundle/" + key + "?" + versionSnackager + "sdkVersion=" + sdkVersion + "&platforms=ios,android,web";
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.module('Resolving dependency', key, '...');
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 12, , 13]);
                        i = 0;
                        _e.label = 2;
                    case 2:
                        if (!(i < 30)) return [3 /*break*/, 11];
                        return [4 /*yield*/, utils_1.fetch(url)];
                    case 3:
                        res = _e.sent();
                        if (!this.status[key]) {
                            return [2 /*return*/];
                        }
                        if (!(res.status === 200)) return [3 /*break*/, 8];
                        return [4 /*yield*/, res.json()];
                    case 4:
                        data = _e.sent();
                        if (!data.pending) return [3 /*break*/, 6];
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.module('Dependency is still being bundled', key, 'trying again shortly');
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 5000); })];
                    case 5:
                        _e.sent();
                        if (!this.status[key]) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.module('Resolved dependency', key, data);
                        delete this.status[key];
                        try {
                            this.callback({
                                name: name,
                                version: version,
                                sdkVersion: sdkVersion,
                            }, data);
                            return [2 /*return*/];
                        }
                        catch (e) {
                            return [2 /*return*/, Promise.reject(e)];
                        }
                        _e.label = 7;
                    case 7: return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, res.text()];
                    case 9:
                        error = _e.sent();
                        throw new Error(error);
                    case 10:
                        i++;
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        e_1 = _e.sent();
                        error = utils_1.createError({
                            message: "Failed to resolve dependency '" + key + "' (" + e_1.message + ")",
                            fileName: key,
                        });
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(error);
                        promiseExists = !!this.status[key];
                        if (promiseExists) {
                            delete this.status[key];
                            this.callback({
                                name: name,
                                version: version,
                                sdkVersion: sdkVersion,
                            }, undefined, error);
                        }
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    return DependencyResolver;
}());
exports.default = DependencyResolver;
function getMissingDependencies(dependencies, sdkVersion, wantedDependencyVersions) {
    var _a, _b;
    var result = {};
    for (var name_1 in dependencies) {
        var dep = dependencies[name_1];
        if (dep.peerDependencies) {
            for (var peerName in dep.peerDependencies) {
                if (!snack_content_1.isModulePreloaded(peerName, sdkVersion, true) && !dependencies[peerName]) {
                    if (!result[peerName]) {
                        result[peerName] = {
                            dependents: [name_1],
                            wantedVersion: (_b = (_a = wantedDependencyVersions === null || wantedDependencyVersions === void 0 ? void 0 : wantedDependencyVersions[peerName]) !== null && _a !== void 0 ? _a : dep.peerDependencies[peerName]) !== null && _b !== void 0 ? _b : '*',
                        };
                    }
                    else {
                        var wantedVersion = wantedDependencyVersions === null || wantedDependencyVersions === void 0 ? void 0 : wantedDependencyVersions[peerName];
                        if (!wantedVersion) {
                            wantedVersion = result[peerName].wantedVersion;
                            var version = dep.peerDependencies[peerName] || '*';
                            // Select the highest most specific version
                            if (wantedVersion === '*' ||
                                (version === 'latest' && wantedVersion === 'latest') ||
                                (version !== '*' &&
                                    version !== 'latest' &&
                                    (wantedVersion === 'latest' ||
                                        semver_1.default.gt(semver_1.default.coerce(version), semver_1.default.coerce(wantedVersion))))) {
                                wantedVersion = version;
                            }
                        }
                        result[peerName] = {
                            dependents: __spreadArrays(result[peerName].dependents, [name_1]),
                            wantedVersion: wantedVersion,
                        };
                    }
                }
            }
        }
    }
    return result;
}
exports.getMissingDependencies = getMissingDependencies;
function verifyDependency(name, version) {
    var _a = validate_npm_package_name_1.default(name), validForOldPackages = _a.validForOldPackages, errors = _a.errors;
    if (!validForOldPackages) {
        // Also support code inside packages such as "react-native-gesture-handler/DrawerLayout"
        var names = name.split('/');
        if (names.length >= 2 && !name.startsWith('@')) {
            var result = validate_npm_package_name_1.default(names[0]);
            validForOldPackages = result.validForNewPackages;
            errors = result.errors;
        }
        else if (names.length >= 2 && name.startsWith('@')) {
            var result = validate_npm_package_name_1.default(names[0] + '/' + names[1]);
            validForOldPackages = result.validForNewPackages;
            errors = result.errors;
        }
        if (!validForOldPackages) {
            return utils_1.createError({
                message: "Invalid dependency '" + name + "' " + ((errors === null || errors === void 0 ? void 0 : errors.length) ? "(" + errors[0] + ")" : ''),
                fileName: name,
            });
        }
    }
    if (!snack_content_1.isValidSemver(version)) {
        return utils_1.createError({
            message: "Invalid dependency '" + name + "' (version '" + version + "' is not a valid semver)",
            fileName: name,
        });
    }
    return undefined;
}
exports.verifyDependency = verifyDependency;
function getPackageName(name) {
    var names = name.split('/');
    if (names[0].startsWith('@') && names.length >= 2) {
        return names[0] + "/" + names[1];
    }
    else {
        return names[0];
    }
}
exports.getPackageName = getPackageName;
//# sourceMappingURL=DependencyResolver.js.map