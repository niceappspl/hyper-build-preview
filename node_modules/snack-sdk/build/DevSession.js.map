{"version":3,"file":"DevSession.js","sourceRoot":"","sources":["../src/DevSession.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './Logger';\nimport { SnackState, SnackUser, SnackSendBeaconRequest } from './types';\nimport { createUserHeader, fetch } from './utils';\n\nexport default class DevSession {\n  private apiURL: string;\n  private logger?: Logger;\n  private onSendBeaconCloseRequest: (request: SnackSendBeaconRequest) => any;\n  private focusedAt?: number;\n\n  // NOTE(cedric): recurrent development session alive notifications are disabled\n  // private notifyInterval: number = 40000;\n  // private notifyTimer?: any;\n\n  constructor(options: {\n    apiURL: string;\n    logger?: Logger;\n    onSendBeaconCloseRequest: (request: SnackSendBeaconRequest) => any;\n  }) {\n    this.apiURL = options.apiURL;\n    this.logger = options.logger;\n    this.onSendBeaconCloseRequest = options.onSendBeaconCloseRequest;\n  }\n\n  setState(state: SnackState, prevState: SnackState) {\n    // Notify or close the session , when either:\n    // 1. session-url has changed\n    // 2. user has changed\n    // 3. device-id has hanged\n\n    // Close\n    const isCloseUser =\n      prevState.user &&\n      (!state.online || state.url !== prevState.url || state.user !== prevState.user);\n    const isCloseDevice =\n      prevState.deviceId &&\n      (!state.online || state.url !== prevState.url || state.deviceId !== prevState.deviceId);\n    if (prevState.online && (isCloseUser || isCloseDevice)) {\n      this.close(\n        prevState.url,\n        isCloseUser ? prevState.user : undefined,\n        isCloseDevice ? prevState.deviceId : undefined,\n      );\n    }\n\n    // Notify\n    if (\n      state.user !== prevState.user ||\n      state.online !== prevState.online ||\n      state.url !== prevState.url ||\n      state.deviceId !== prevState.deviceId ||\n      state.onlineName !== prevState.onlineName\n    ) {\n      this.notify(state);\n    }\n  }\n\n  setFocus(state: SnackState) {\n    this.notify(state, true);\n  }\n\n  private getRequest(close: boolean, user?: SnackUser, deviceId?: string) {\n    const suffix = deviceId ? `?deviceId=${deviceId}` : '';\n    const endpoint = close ? 'notify-close' : 'notify-alive';\n    const url = `${this.apiURL}/--/api/v2/development-sessions/${endpoint}${suffix}`;\n\n    return {\n      url,\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        ...createUserHeader(user),\n      },\n    };\n  }\n\n  private async notify(state: SnackState, setFocus?: boolean) {\n    const { user, online, url: onlineURL, deviceId, onlineName } = state;\n\n    // NOTE(cedric): recurrent development session alive notifications are disabled\n    // if (this.notifyTimer) {\n    //   clearTimeout(this.notifyTimer);\n    //   this.notifyTimer = undefined;\n    // }\n\n    if (!online || (!user && !deviceId)) {\n      this.focusedAt = undefined;\n      return;\n    }\n\n    if (!this.focusedAt || setFocus) {\n      this.focusedAt = Date.now();\n    }\n\n    // NOTE(cedric): recurrent development session alive notifications are disabled\n    // if (!this.notifyTimer) {\n    //   this.notifyTimer = setTimeout(() => this.notify(state), this.notifyInterval);\n    // }\n\n    try {\n      const { url, ...data } = this.getRequest(false, user, deviceId);\n      const response = await fetch(url, {\n        ...data,\n        body: JSON.stringify({\n          data: {\n            session: {\n              description: onlineName,\n              hostname: 'snack',\n              config: {},\n              url: onlineURL,\n              source: 'snack',\n              openedAt: this.focusedAt,\n            },\n          },\n        }),\n      });\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      const json = await response.json();\n      this.onSendBeaconCloseRequest({\n        url: this.getRequest(true, undefined, deviceId).url,\n        data: new Blob(\n          [\n            JSON.stringify({\n              session: {\n                url: onlineURL,\n              },\n              ...(json.data?.auth\n                ? {\n                    auth: json.data.auth,\n                  }\n                : {}),\n            }),\n          ],\n          { type: 'text/plain' },\n        ),\n      });\n    } catch (e) {\n      this.logger?.error('Failed to advertise', e);\n    }\n  }\n\n  private async close(onlineURL: string, user?: SnackUser, deviceId?: string) {\n    try {\n      const { url, ...data } = this.getRequest(true, user, deviceId);\n      const response = await fetch(url, {\n        ...data,\n        body: JSON.stringify({\n          session: {\n            url: onlineURL,\n          },\n        }),\n      });\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n    } catch (e) {\n      this.logger?.error('Failed to advertise close', e);\n    }\n  }\n}\n"]}