"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var METRICS_FAILED_FOR_RECONNECT_ATTEMPTS = 5;
var ConnectionMetricsEmitter = /** @class */ (function () {
    function ConnectionMetricsEmitter() {
        this.listener = null;
    }
    ConnectionMetricsEmitter.prototype.emitSuccessed = function (payload) {
        if (this.lastEmitState === undefined || this.lastEmitState === 'TRANSPORT_CONNECTION_FAILED') {
            // To reduce the duplicated events, e.g. keeping failed events.
            // We only log undefined -> succeeded, undefined -> failed, and failed -> successed
            this.emit(__assign({ name: 'TRANSPORT_CONNECTION_SUCCEEDED' }, payload));
            this.lastEmitState = 'TRANSPORT_CONNECTION_SUCCEEDED';
        }
    };
    ConnectionMetricsEmitter.prototype.emitFailed = function (payload) {
        if (this.lastEmitState === undefined &&
            payload.attempts >= METRICS_FAILED_FOR_RECONNECT_ATTEMPTS) {
            // To reduce the duplicated events, e.g. keeping failed events.
            // We only log undefined -> succeeded, undefined -> failed, and failed -> succeeded
            this.emit(__assign({ name: 'TRANSPORT_CONNECTION_FAILED' }, payload));
            this.lastEmitState = 'TRANSPORT_CONNECTION_FAILED';
        }
    };
    ConnectionMetricsEmitter.prototype.resetState = function () {
        this.lastEmitState = undefined;
    };
    ConnectionMetricsEmitter.prototype.setUpdateListener = function (listener) {
        this.listener = listener;
    };
    ConnectionMetricsEmitter.prototype.emit = function (event) {
        var _a;
        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.call(this, event);
    };
    return ConnectionMetricsEmitter;
}());
exports.default = new ConnectionMetricsEmitter();
//# sourceMappingURL=ConnectionMetricsEmitter.js.map