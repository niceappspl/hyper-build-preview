"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileDiff = void 0;
var diff_1 = require("diff");
var snack_content_1 = require("snack-content");
var ua_parser_js_1 = require("ua-parser-js");
var FileUploader_1 = __importDefault(require("../FileUploader"));
var defaultConfig_1 = require("../defaultConfig");
var SnackIdentityCode = {
    files: defaultConfig_1.SnackIdentityState.files,
    dependencies: defaultConfig_1.SnackIdentityState.dependencies,
    sdkVersion: defaultConfig_1.SnackIdentityState.sdkVersion,
};
function getFileDiff(oldCode, newCode) {
    var patch = diff_1.createPatch('code', oldCode, newCode, '', '', {
        context: 0,
    });
    if (patch) {
        return patch;
    }
    else {
        throw new Error('Error creating a file diff');
    }
}
exports.getFileDiff = getFileDiff;
var PLACEHOLDER_URL = 'https://snack-code-uploads.s3.us-west-1.amazonaws.com/~asset/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
var CodeMessageBuilder = /** @class */ (function () {
    function CodeMessageBuilder(options) {
        var _this = this;
        this.code = SnackIdentityCode;
        this.placeholderURLs = {};
        this.uploadedURLs = {};
        this.onFileUploaded = function (request, resultURL, _error) {
            var path = request.path;
            delete _this.placeholderURLs[path];
            if (resultURL) {
                _this.uploadedURLs[path] = resultURL;
                if (!Object.keys(_this.placeholderURLs).length) {
                    var codeMessage = _this.createCodeMessage(_this.code, _this.codeMessage, _this.code);
                    if (_this.verifyCodeMessageSize(codeMessage)) {
                        _this.callback(codeMessage, _this.code);
                    }
                }
            }
        };
        this.logger = options.logger;
        this.callback = options.callback;
        this.verifyCodeMessageSize = options.verifyCodeMessageSize;
        this.maxDiffPlaceholder = options.maxDiffPlaceholder;
        this.codeUploader = options.apiURL
            ? new FileUploader_1.default({
                apiURL: options.apiURL,
                logger: options.logger,
                callback: this.onFileUploaded,
            })
            : undefined;
    }
    CodeMessageBuilder.prototype.setCode = function (code) {
        var _a, _b, _c;
        if (code === this.code) {
            return;
        }
        var prevCode = this.code;
        var files = code.files;
        this.code = code;
        // Cancel any uploads for files that were removed or changed
        for (var path in prevCode.files) {
            if (prevCode.files[path].contents !== ((_a = files[path]) === null || _a === void 0 ? void 0 : _a.contents)) {
                delete this.placeholderURLs[path];
                delete this.uploadedURLs[path];
                (_b = this.codeUploader) === null || _b === void 0 ? void 0 : _b.remove(path, prevCode.files[path]);
            }
        }
        // Generate code message
        var codeMessage = this.createCodeMessage(code, this.codeMessage, prevCode);
        this.codeMessage = codeMessage;
        // When the code message size is valid and there are no pending
        // uploads, then fire the callback immediately
        if (this.verifyCodeMessageSize(codeMessage)) {
            if (!Object.keys(this.placeholderURLs).length) {
                this.callback(codeMessage, code);
            }
            return;
        }
        // Upload files if the code message exceeds the limit
        // Sort code files by size
        if (this.codeUploader) {
            var paths = Object.keys(files)
                .filter(function (path) { return files[path].type === 'CODE'; })
                // @ts-ignore
                .sort(function (a, b) { return files[b].contents.length - files[a].contents.length; });
            // Upload the largest file
            for (var i = 0; i < paths.length; i++) {
                var path = paths[i];
                if (!this.uploadedURLs[path] && !this.placeholderURLs[path]) {
                    var file = files[path];
                    this.placeholderURLs[path] = PLACEHOLDER_URL;
                    // this.logger?.comm('Uploading file', path, `, ${file.contents.length} bytes ...`);
                    this.codeUploader.add(path, file);
                    codeMessage.diff[path] = '';
                    codeMessage.s3url[path] = this.placeholderURLs[path];
                    if (this.verifyCodeMessageSize(codeMessage)) {
                        // Message size is now valid. When the upload completes, it
                        // will try to call the callback
                        return;
                    }
                }
            }
        }
        // Message is still too large
        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error('Message size is too large');
    };
    CodeMessageBuilder.prototype.createCodeMessage = function (code, prevCodeMessage, prevCode) {
        var files = code.files, dependencies = code.dependencies, sdkVersion = code.sdkVersion;
        var diff = __assign({}, files);
        var s3url = {};
        for (var path in files) {
            var file = files[path];
            if (this.uploadedURLs[path] || this.placeholderURLs[path]) {
                diff[path] = '';
                s3url[path] = this.uploadedURLs[path] || this.placeholderURLs[path];
            }
            else {
                if (file.type === 'CODE') {
                    if ((prevCodeMessage === null || prevCodeMessage === void 0 ? void 0 : prevCodeMessage.diff[path]) &&
                        (prevCode === null || prevCode === void 0 ? void 0 : prevCode.files[path].contents) === code.files[path].contents) {
                        diff[path] = prevCodeMessage.diff[path];
                    }
                    else {
                        if (this.maxDiffPlaceholder && file.contents.length >= this.maxDiffPlaceholder.length) {
                            diff[path] = this.maxDiffPlaceholder;
                        }
                        else {
                            diff[path] = getFileDiff('', file.contents);
                        }
                    }
                }
                else {
                    diff[path] = '';
                }
                if (file.type === 'ASSET' && typeof file.contents === 'string') {
                    s3url[path] = file.contents;
                }
            }
        }
        var deps = {};
        for (var name_1 in dependencies) {
            var dep = dependencies[name_1];
            if (dep.handle && !snack_content_1.isModulePreloaded(name_1, sdkVersion)) {
                deps[name_1] = {
                    version: dep.version,
                    handle: dep.handle,
                    // Resolved has been replaced by handle. It is still needed for pre SDK 37 runtimes
                    resolved: dep.handle.substring(dep.handle.lastIndexOf('@') + 1),
                };
            }
        }
        var metadata = {
            expoSDKVersion: code.sdkVersion,
        };
        if (typeof navigator !== 'undefined' && navigator.userAgent) {
            var ua = new ua_parser_js_1.UAParser(navigator.userAgent).getResult();
            metadata.webHostName = window.location.hostname;
            metadata.webOSArchitecture = ua.cpu.architecture;
            metadata.webOSFamily = ua.os.name;
            metadata.webOSVersion = ua.os.version;
            metadata.webLayoutEngine = ua.engine.name;
            metadata.webDeviceType = ua.device.type;
            metadata.webBrowser = ua.browser.name;
            metadata.webBrowserVersion = ua.browser.version;
        }
        return {
            type: 'CODE',
            diff: diff,
            s3url: s3url,
            dependencies: deps,
            metadata: metadata,
        };
    };
    return CodeMessageBuilder;
}());
exports.default = CodeMessageBuilder;
//# sourceMappingURL=CodeMessageBuilder.js.map