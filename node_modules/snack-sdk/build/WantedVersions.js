"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WantedDependencyVersions = void 0;
var snack_content_1 = require("snack-content");
var utils_1 = require("./utils");
var WantedDependencyVersions = /** @class */ (function () {
    function WantedDependencyVersions(options) {
        this.apiUrl = options.apiUrl;
        this.logger = options.logger;
        this.callback = options.callback;
        this.promise = Promise.resolve();
    }
    WantedDependencyVersions.prototype.setSDKVersion = function (sdkVersion) {
        if (this.sdkVersion !== sdkVersion) {
            this.sdkVersion = sdkVersion;
            this.promise = this.fetchModules(sdkVersion);
        }
    };
    WantedDependencyVersions.prototype.waitForCompletion = function () {
        return this.promise;
    };
    /**
     * Fetch all versioned modules from an SDK.
     * This is similar to the `getCombinedKnownVersionsAsync` method.
     * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L34
     */
    WantedDependencyVersions.prototype.fetchModules = function (sdkVersion) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var sdkVersionString, _e, remoteVersions, bundledVersions, versions, error_1;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (this.sdkVersion !== sdkVersion) {
                            return [2 /*return*/];
                        }
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.module('fetching versioned modules for SDK', sdkVersion, '...');
                        sdkVersionString = ((_b = snack_content_1.sdks[sdkVersion]) === null || _b === void 0 ? void 0 : _b.version) || sdkVersion;
                        return [4 /*yield*/, Promise.all([
                                this.fetchRemoteVersionedModules(sdkVersionString),
                                this.fetchBundledNativeModules(sdkVersionString),
                            ])];
                    case 2:
                        _e = _f.sent(), remoteVersions = _e[0], bundledVersions = _e[1];
                        versions = __assign(__assign({}, remoteVersions), bundledVersions);
                        // Note(cedric): SDK could have changed during fetching
                        if (this.sdkVersion === sdkVersion) {
                            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.module('fetched versioned modules for SDK', sdkVersion, versions);
                            this.callback(sdkVersion, versions);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _f.sent();
                        // Note(cedric): SDK could have changed during fetching
                        if (this.sdkVersion === sdkVersion) {
                            (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(error_1);
                            this.callback(sdkVersion, undefined, error_1);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch all bundled native modules from the `expo/bundledNativeModules.json` file.
     */
    WantedDependencyVersions.prototype.fetchBundledNativeModules = function (sdkVersion) {
        var urlVersion = encodeURIComponent(sdkVersion);
        return utils_1.fetch("https://cdn.jsdelivr.net/npm/expo@" + urlVersion + "/bundledNativeModules.json")
            .then(function (response) { return response.json(); })
            .then(function (data) { return data || {}; });
    };
    /**
     * Fetch all remote versioned modules from the `/versions/latest` API endpoint.
     */
    WantedDependencyVersions.prototype.fetchRemoteVersionedModules = function (sdkVersion) {
        var _this = this;
        return utils_1.fetch(this.apiUrl + "/--/api/v2/versions/latest")
            .then(function (response) { return response.json(); })
            .then(function (data) { return _this.normalizeRemoteVersionResponse(sdkVersion, data); });
    };
    /**
     * Normalize the versions response, and account for incorrect settings.
     * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L13-L31
     */
    WantedDependencyVersions.prototype.normalizeRemoteVersionResponse = function (sdkVersion, response) {
        var _a, _b;
        if (response === void 0) { response = {}; }
        var sdkVersionSettings = (_b = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.sdkVersions) === null || _b === void 0 ? void 0 : _b[sdkVersion];
        if (!sdkVersionSettings) {
            return {};
        }
        var relatedPackages = sdkVersionSettings.relatedPackages, facebookReactVersion = sdkVersionSettings.facebookReactVersion, facebookReactNativeVersion = sdkVersionSettings.facebookReactNativeVersion;
        var reactVersion = facebookReactVersion
            ? {
                react: facebookReactVersion,
                'react-dom': facebookReactVersion,
            }
            : undefined;
        // Adds `react-dom`, `react`, and `react-native` to the list of known package versions (`relatedPackages`)
        return __assign(__assign(__assign({}, relatedPackages), reactVersion), { 'react-native': facebookReactNativeVersion });
    };
    return WantedDependencyVersions;
}());
exports.WantedDependencyVersions = WantedDependencyVersions;
//# sourceMappingURL=WantedVersions.js.map