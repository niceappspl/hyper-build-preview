import { SDKVersion, SnackDependencies, SnackDependency, SnackFile, SnackFiles } from 'snack-content';
import { SnackTransport, SnackTransportOptions } from './transports';
import { SnackState, SnackUser, SnackLogEvent, SnackListenerSubscription, SnackConnectedClients, SnackWindowRef } from './types';
export declare type SnackOptions = {
    sdkVersion?: SDKVersion;
    name?: string;
    description?: string;
    dependencies?: SnackDependencies;
    files?: SnackFiles;
    apiURL?: string;
    snackpubURL?: string;
    runtimeEndpoint?: string;
    snackagerURL?: string;
    verbose?: boolean;
    disabled?: boolean;
    online?: boolean;
    channel?: string;
    deviceId?: string;
    transports?: {
        [id: string]: SnackTransport;
    };
    createTransport?: (options: SnackTransportOptions) => SnackTransport;
    codeChangesDelay?: number;
    reloadTimeout?: number;
    previewTimeout?: number;
    user?: SnackUser;
    id?: string;
    snackId?: string;
    accountSnackId?: string;
    webPlayerURL?: string;
    webPreviewRef?: SnackWindowRef;
};
export declare type SnackSaveOptions = {
    isDraft?: boolean;
    ignoreUser?: boolean;
};
export declare type SnackStateListener = (state: SnackState, prevState: SnackState) => any;
export declare type SnackLogListener = (log: SnackLogEvent) => any;
export default class Snack {
    private state;
    private stateListeners;
    private logListeners;
    private readonly options;
    private readonly createTransport;
    private readonly logger?;
    private readonly apiURL;
    private readonly snackpubURL;
    private readonly runtimeEndpoint;
    private readonly dependencyResolver;
    private readonly fileUploader;
    private readonly DevSession;
    private wantedDependencyVersions;
    private codeChangesDelay;
    private codeChangesTimer;
    private readonly reloadTimeout;
    private readonly previewTimeout;
    private pruneConnectionsTimer;
    private readonly transportListeners;
    constructor(options: SnackOptions);
    /**
     * Sets the Expo SDK version.
     * @param sdkVersion Valid SDK version (e.g. "38.0.0")
     */
    setSDKVersion(sdkVersion: SDKVersion): void;
    /**
     * Sets the name of the Snack.
     * @param name E.g. "conspicious orange"
     */
    setName(name: string): void;
    /**
     * Sets the description of the Snack.
     * @param name E.g. "My awesome Snack"
     */
    setDescription(description: string): void;
    /**
     * Sets the associated user account.
     *
     * When set and `online` is true, causes this Snack to appear on the
     * "Recently in Development" section of all Expo clients that are signed
     * in with that account.
     */
    setUser(user?: SnackUser): void;
    /**
     * Sets the device-id of an Expo client. When set and `online` is true, causes this
     * Snack to appear on the "Recently in Development" section of that Expo client.
     */
    setDeviceId(deviceId?: string): void;
    /**
     * Sets the focus to this Snack.
     *
     * Causes this Snack to be moved to the top of the "Recently in Development" list
     * in the Expo client.
     */
    setFocus(): void;
    /**
     * Sets the delay that is used before sending code updates to the connected clients.
     * Use this method to set the "debounce" timeout to use for sending code changes
     * over pubsub.
     *
     * ```
     *   -1 = Disable automatic sending of code changes (use `sendCodeChanges` to trigger the send)
     *    0 = Code changes are sent immediately to the connected clients
     * 1..n = Code changes are debounced and sent after the wait time
     * ```
     *
     * @param delay Timeout in milliseconds (or -1 to disable automatic code updates)
     */
    setCodeChangesDelay(delay: number): void;
    /**
     * Update the `webPlayerURL` which serves the webPlayer runtime.
     */
    setWebPlayerURL(webPlayerURL: string | null): void;
    /**
     * Sends any pending code changes to the connected clients.
     * No changes are send if all clients are already up to date.
     */
    sendCodeChanges(): void;
    private _sendCodeChangesDebounced;
    /**
     * Uploads the current code to Expo's servers and return a url that points to that version of the code.
     */
    saveAsync(options?: SnackSaveOptions): Promise<{
        id: string;
        url: string;
        hashId: string | undefined;
        accountSnackId: string | undefined;
        snackId: string | undefined;
    }>;
    /**
     * Gets the URL at which the Snack can be downloaded as a zip file. Will automatically
     * save the Snack if it contains unsaved changes.
     */
    getDownloadURLAsync(saveOptions?: SnackSaveOptions): Promise<string>;
    private uploadPreview;
    /**
     * Returns the current state of the Snack. This includes files, dependencies
     * and other meta-data about the Snack.
     */
    getState(): SnackState;
    /**
     * Waits for any pending operations such as running dependencies resolutions
     * before returning the state.
     */
    getStateAsync(): Promise<SnackState>;
    /**
     * Adds a callback for listening for any state changes.
     *
     * @example
     * ```
     * const unsubscribe = Snack.addStateListener((state, prevState) => {
     *   if (state.name !== prevState.name) {
     *     console.log('name changed: ', state.name);
     *   }
     * });
     *
     * Snack.setName('unforgiven orange'); // // Make a change to the state
     *
     * unsubscribe(); // Remove listener
     * ```
     */
    addStateListener(listener: SnackStateListener): SnackListenerSubscription;
    private setState;
    private updateDerivedState;
    private onStateChanged;
    /**
     * Updates code or asset files.
     *
     * Use this method to add/remove/update files and upload assets.
     * To remove a file specify `null` as the value of the file.
     *
     * @example
     * ```ts
     * const Snack = new Snack({
     *   files: {
     *     'App.js': { type: 'CODE', contents: 'console.log("hello world!");' },
     *     'data.json': { type: 'CODE', contents: '{}' },
     *   }
     * });
     *
     * // Add or update files
     * Snack.updateFiles({
     *   'App.js': {
     *     type: 'CODE',
     *     contents: 'console.log("Hello Snack!");'
     *   }
     * });
     *
     * // Upload an asset
     * Snack.updateFiles({
     *   'assets/logo.png': {
     *     type: 'ASSET',
     *     contents: file // File, Blob or FormData
     *   }
     * });
     *
     * // Add a pre-uploaded asset
     * Snack.updateFiles({
     *   'assets/expo.jpg': {
     *     type: 'ASSET',
     *     contents: 'https://mysite/expo.jpg'
     *   }
     * });
     *
     * // Remove files
     * Snack.updateFiles({
     *   'data.json': null,
     *   'assets/expo.jpg': null
     * });
     * ```
     */
    updateFiles(files: {
        [path: string]: SnackFile | null;
    }): void;
    /**
     * Helper function that uploads an asset and returns its url.
     */
    uploadAssetAsync: (contents: File | Blob | FormData) => Promise<string>;
    private updateFileUploader;
    private onFileUploaded;
    /**
     * Updates dependencies.
     *
     * Use this method to add/remove/update dependencies.
     * To remove a dependency specify `null` as the value of the key/value pair.
     *
     * @example
     * ```ts
     * const Snack = new Snack({
     *   dependencies: {
     *     'react-native-paper': '~2.0.0'
     *   }
     * });
     *
     * // Add dependency
     * Snack.updateDependencies({
     *   'expo-font': '9.0.0'
     * });
     *
     * // Remove dependency
     * Snack.updateDependencies({
     *   'expo-font': null
     * });
     * ```
     */
    updateDependencies(dependencies: {
        [name: string]: SnackDependency | null;
    }): void;
    private updateDerivedDependenciesState;
    private updateWantedDependencyVersions;
    private onWantedDependencyVersions;
    private updateDependencyResolver;
    private onDependencyResolved;
    /**
     * Enables or disables the Snack.
     *
     * When disabled, no uploads or dependency resolve operations
     * are performed.
     */
    setDisabled(disabled: boolean): void;
    /**
     * Makes the Snack available online.
     *
     * When online, a pubsub channel is created to which clients can
     * connect.
     */
    setOnline(enabled: boolean): void;
    private updateDerivedOnlineState;
    private updateDerivedWebPreviewState;
    private onDevSessionSendBeaconCloseRequest;
    /**
     * Reloads all connected clients.
     *
     * Note: During the reload proces, clients may get disconnected which
     * causes the connectedClient to disappear and re-appear. The `reloadTimeout`
     * option in the constructor can be used to keep connectedClients "alive"
     * during the reload process.
     */
    reloadConnectedClients(): void;
    /**
     * Requests a preview from the connected clients.
     *
     * The previews are returned in the `previewURL` field of each connectedClient.
     */
    getPreviewAsync(): Promise<SnackConnectedClients>;
    private updateTransports;
    private onTransportEvent;
    private onClientConnected;
    private onClientDisconnected;
    /**
     * Adds a callback for listening for any client generated log messages.
     *
     * @example
     * ```
     * const unsubscribe = Snack.addLogListener((log) => {
     *   console.log('log message received: ', log);
     * });
     *
     * unsubscribe(); // Remove listener
     * ```
     */
    addLogListener(listener: SnackLogListener): SnackListenerSubscription;
    private onProtocolMessageReceived;
    private onProtocolMessageSent;
    private onConsoleMessageReceived;
    private onErrorMessageReceived;
    private onStatusReportMessageReceived;
}
