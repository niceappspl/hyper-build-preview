import { SDKVersion, SnackDependencyVersions } from 'snack-content';
import { Logger } from './Logger';
import { SnackError } from './types';
export declare type WantedDependencyVersionsCallback = (sdkVersion: SDKVersion, result?: SnackDependencyVersions, error?: SnackError) => any;
interface WantedDependencyVersionsOptions {
    /** The Expo API URL to fetch the remote versioned modules from */
    apiUrl: string;
    logger?: Logger;
    callback: WantedDependencyVersionsCallback;
}
export declare class WantedDependencyVersions {
    private readonly callback;
    private readonly logger?;
    private sdkVersion?;
    private promise;
    private apiUrl;
    constructor(options: WantedDependencyVersionsOptions);
    setSDKVersion(sdkVersion: SDKVersion): void;
    waitForCompletion(): Promise<any>;
    /**
     * Fetch all versioned modules from an SDK.
     * This is similar to the `getCombinedKnownVersionsAsync` method.
     * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L34
     */
    private fetchModules;
    /**
     * Fetch all bundled native modules from the `expo/bundledNativeModules.json` file.
     */
    private fetchBundledNativeModules;
    /**
     * Fetch all remote versioned modules from the `/versions/latest` API endpoint.
     */
    private fetchRemoteVersionedModules;
    /**
     * Normalize the versions response, and account for incorrect settings.
     * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L13-L31
     */
    private normalizeRemoteVersionResponse;
}
export {};
