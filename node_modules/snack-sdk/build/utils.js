"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserHeader = exports.createError = exports.createURL = exports.createChannel = exports.fetch = void 0;
var fetch_ponyfill_1 = __importDefault(require("fetch-ponyfill"));
var nanoid_1 = require("nanoid");
var snack_content_1 = require("snack-content");
var fetch = fetch_ponyfill_1.default().fetch;
exports.fetch = fetch;
/**
 * All valid characters to generate a new channel ID.
 * Both `+` and `-` are used as delimiters in the classic updates URL.
 * In the new URL format, we prefer URL/sub-domain safe characters.
 */
var VALID_CHANNEL_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
var generateChannel = nanoid_1.customAlphabet(VALID_CHANNEL_CHARS, 10);
function createChannel(channel) {
    channel = channel !== null && channel !== void 0 ? channel : generateChannel();
    if (channel.length < 6) {
        throw new Error('Please use a channel id with more characters (entropy)');
    }
    if (channel.length > 128) {
        throw new Error('Channel id too long, use a channel id thats shorter than 128 characters');
    }
    for (var _i = 0, channel_1 = channel; _i < channel_1.length; _i++) {
        var char = channel_1[_i];
        if (VALID_CHANNEL_CHARS.indexOf(char) < 0) {
            throw new Error("Channel id contains an invalid character \"" + char + "\", only \"[0-9a-zA-Z]\" are allowed");
        }
    }
    return channel;
}
exports.createChannel = createChannel;
function createURL(endpoint, sdkVersion, channel, id) {
    return snack_content_1.createRuntimeUrl({ endpoint: endpoint, channel: channel, sdkVersion: sdkVersion, snack: id });
}
exports.createURL = createURL;
function createError(config) {
    var error = new Error(config.message);
    if (config.name)
        error.name = config.name;
    if (config.fileName)
        error.fileName = config.fileName;
    if (config.lineNumber)
        error.lineNumber = config.lineNumber;
    if (config.columnNumber)
        error.columnNumber = config.columnNumber;
    if (config.stack)
        error.stack = config.stack;
    return error;
}
exports.createError = createError;
function createUserHeader(user) {
    if (user === null || user === void 0 ? void 0 : user.sessionSecret) {
        return { 'Expo-Session': user.sessionSecret };
    }
    if (user === null || user === void 0 ? void 0 : user.accessToken) {
        return { Authorization: "Bearer " + user.accessToken };
    }
    return {};
}
exports.createUserHeader = createUserHeader;
//# sourceMappingURL=utils.js.map