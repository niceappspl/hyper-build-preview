import { SnackState } from './types';
export declare type StateObject<T> = {
    [key: string]: T;
};
export declare function addObjects<T>(state: StateObject<T>, content: {
    [key: string]: T;
}, filter?: (a: T, b: T) => boolean): StateObject<T>;
export declare function addObject<T>(state: StateObject<T>, key: string, content: T, filter?: (a: T, b: T) => boolean): StateObject<T>;
export declare function removeObjects<T>(state: StateObject<T>, keys: string[]): StateObject<T>;
export declare function removeObject<T>(state: StateObject<T>, key: string): StateObject<T>;
export declare function updateObjects<T>(state: StateObject<T>, content: {
    [key: string]: T | null;
}, compareFn?: (a: T, b: T) => boolean): StateObject<T>;
export declare function isBusy(state: SnackState): boolean;
export declare function isCodeChanged(state: SnackState, prevState: SnackState): boolean;
export declare function isUnsaved(state: SnackState, prevState: SnackState): boolean;
