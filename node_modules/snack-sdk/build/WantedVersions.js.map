{"version":3,"file":"WantedVersions.js","sourceRoot":"","sources":["../src/WantedVersions.ts"],"names":[],"mappings":"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","sourcesContent":["import { SDKVersion, SnackDependencyVersions, sdks } from 'snack-content';\n\nimport { Logger } from './Logger';\nimport { SnackError } from './types';\nimport { fetch } from './utils';\n\nexport type WantedDependencyVersionsCallback = (\n  sdkVersion: SDKVersion,\n  result?: SnackDependencyVersions,\n  error?: SnackError,\n) => any;\n\ninterface WantedDependencyVersionsOptions {\n  /** The Expo API URL to fetch the remote versioned modules from */\n  apiUrl: string;\n  logger?: Logger;\n  callback: WantedDependencyVersionsCallback;\n}\n\nexport class WantedDependencyVersions {\n  private readonly callback: WantedDependencyVersionsCallback;\n  private readonly logger?: Logger;\n  private sdkVersion?: SDKVersion;\n  private promise: Promise<any>;\n  private apiUrl: string;\n\n  constructor(options: WantedDependencyVersionsOptions) {\n    this.apiUrl = options.apiUrl;\n    this.logger = options.logger;\n    this.callback = options.callback;\n    this.promise = Promise.resolve();\n  }\n\n  setSDKVersion(sdkVersion: SDKVersion) {\n    if (this.sdkVersion !== sdkVersion) {\n      this.sdkVersion = sdkVersion;\n      this.promise = this.fetchModules(sdkVersion);\n    }\n  }\n\n  waitForCompletion() {\n    return this.promise;\n  }\n\n  /**\n   * Fetch all versioned modules from an SDK.\n   * This is similar to the `getCombinedKnownVersionsAsync` method.\n   * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L34\n   */\n  private async fetchModules(sdkVersion: SDKVersion): Promise<void> {\n    if (this.sdkVersion !== sdkVersion) {\n      return;\n    }\n\n    try {\n      this.logger?.module('fetching versioned modules for SDK', sdkVersion, '...');\n\n      // TODO(cedric): check why this is still necessary\n      const sdkVersionString = sdks[sdkVersion]?.version || sdkVersion;\n      const [remoteVersions, bundledVersions] = await Promise.all([\n        this.fetchRemoteVersionedModules(sdkVersionString),\n        this.fetchBundledNativeModules(sdkVersionString),\n      ]);\n\n      const versions = {\n        ...remoteVersions,\n        ...bundledVersions,\n      };\n\n      // Note(cedric): SDK could have changed during fetching\n      if (this.sdkVersion === sdkVersion) {\n        this.logger?.module('fetched versioned modules for SDK', sdkVersion, versions);\n        this.callback(sdkVersion, versions);\n      }\n    } catch (error) {\n      // Note(cedric): SDK could have changed during fetching\n      if (this.sdkVersion === sdkVersion) {\n        this.logger?.error(error);\n        this.callback(sdkVersion, undefined, error);\n      }\n    }\n  }\n\n  /**\n   * Fetch all bundled native modules from the `expo/bundledNativeModules.json` file.\n   */\n  private fetchBundledNativeModules(sdkVersion: string): Promise<Record<string, string>> {\n    const urlVersion = encodeURIComponent(sdkVersion);\n    return fetch(`https://cdn.jsdelivr.net/npm/expo@${urlVersion}/bundledNativeModules.json`)\n      .then((response) => response.json())\n      .then((data) => data || {});\n  }\n\n  /**\n   * Fetch all remote versioned modules from the `/versions/latest` API endpoint.\n   */\n  private fetchRemoteVersionedModules(sdkVersion: string): Promise<Record<string, string>> {\n    return fetch(`${this.apiUrl}/--/api/v2/versions/latest`)\n      .then((response) => response.json())\n      .then((data) => this.normalizeRemoteVersionResponse(sdkVersion, data));\n  }\n\n  /**\n   * Normalize the versions response, and account for incorrect settings.\n   * @see https://github.com/expo/expo/blob/0f1b5f0cd1caa86db3c01a001b14def93062a07e/packages/%40expo/cli/src/start/doctor/dependencies/getVersionedPackages.ts#L13-L31\n   */\n  private normalizeRemoteVersionResponse(sdkVersion: string, response: any = {}) {\n    const sdkVersionSettings = response?.data?.sdkVersions?.[sdkVersion];\n\n    if (!sdkVersionSettings) {\n      return {};\n    }\n\n    const { relatedPackages, facebookReactVersion, facebookReactNativeVersion } =\n      sdkVersionSettings;\n\n    const reactVersion = facebookReactVersion\n      ? {\n          react: facebookReactVersion,\n          'react-dom': facebookReactVersion,\n        }\n      : undefined;\n\n    // Adds `react-dom`, `react`, and `react-native` to the list of known package versions (`relatedPackages`)\n    return {\n      ...relatedPackages,\n      ...reactVersion,\n      'react-native': facebookReactNativeVersion,\n    };\n  }\n}\n"]}